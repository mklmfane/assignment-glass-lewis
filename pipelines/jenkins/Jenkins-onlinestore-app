pipeline {
    agent any

    environment {
        REGISTRY_URL = "localhost:5000"
        PROJECT_DIR = "src/docker-frontend-backend-db"
        FRONTEND_IMAGE = "${REGISTRY_URL}/frontend-service"
        BACKEND_IMAGE = "${REGISTRY_URL}/backend-service"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git 'https://github.com/mklmfane/assignment-glass-lewis.git'
            }
        }

        stage('Run Tests') {
            failFast true
            parallel {
                stage('Frontend Tests') {
                    steps {
                        dir("${PROJECT_DIR}/frontend") {
                            sh 'npm install'
                            sh 'npm test -- --watchAll=false'
                        }
                    }
                }

                stage('Backend Tests') {
                    steps {
                        dir("${PROJECT_DIR}/backend") {
                            sh 'npm install'
                            sh 'npm test -- --watchAll=false'
                        }
                    }
                }
            }
        }

        stage('Build with Docker Compose') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh 'docker compose build'
                }
            }
        }

        stage('Start Containers') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh 'docker compose up -d'
                }
            }
        }

        stage('Login and Push to Registry') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'REGISTRY_CREDS', variable: 'REGISTRY_CREDS')]) {
                        def (user, pass) = REGISTRY_CREDS.tokenize(':')
                        sh """
                            echo "$pass" | docker login ${REGISTRY_URL} -u "$user" --password-stdin
                            docker tag frontend-service ${FRONTEND_IMAGE}
                            docker tag backend-service ${BACKEND_IMAGE}
                            docker push ${FRONTEND_IMAGE}
                            docker push ${BACKEND_IMAGE}
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed.'
            dir("${PROJECT_DIR}") {
                sh 'docker compose down || true'
            }
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
